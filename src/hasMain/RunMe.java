package hasMain;

import java.util.ArrayList;

import org.openqa.selenium.WebDriver;

import inputLayer.DriverMaker;
import inputLayer.MySystemReader;
import inputLayer.WebSudokuDotCom;
import sudokuSolver.ACounter;
import sudokuSolver.CleanThese;
import sudokuSolver.OrderNFixer;
import sudokuSolver.Puzzle;
import sudokuSolver.RCS;
import sudokuSolver.TestData;
import sudokuSolver.WorkPuzzle;


public class RunMe {

	public static void main(String[] args) {
		
		System.out.println
		("This sudoku solver uses standard row, column, and square (field) elimination \n"
				+ "logic for naked or hidden singles, pairs, threes, etc. up to order N \n"
				+ "specified by the user. Please note that puzzles, as printed on the \n"
				+ "screen, will display a zero for an unsolved index.\n\n"
				+ "Here is an easy puzzle generated by a popular website: \n");
		
		Puzzle p1=new Puzzle(TestData.easyPuzzles[0]);
		WorkPuzzle wp1=new WorkPuzzle(p1);
		wp1.printPuzzle();
		
		int N=4;
		System.out.println("Solve puzzle with order N logic (up to "+N+").");
		wp1.solveByOrderN(N);
		wp1.printPuzzle();
		
		System.out.println("\n"
				+ "This program cannot complete puzzles with multiple solutions. Easy \n"
				+ "puzzles are more likely to fail than more diffiult ones. \n\n"
				+ "The current implementation is verbose; it prints the order of \n"
				+ "sets being searched and the number of cycles executed before no \n"
				+ "further changes were made. \n\n"
				+ "Here is a more difficult puzzle, also generated by a website: \n");
		
		Puzzle p2=new Puzzle(TestData.evilPuzzles[0]);
		WorkPuzzle wp2=new WorkPuzzle(p2);
		wp2.printPuzzle();
		
		N=4;
		System.out.println("Solve puzzle with order N logic (from order 1 up to "+N+").");
		wp2.solveByOrderN(N);
		wp2.printPuzzle();
		
		System.out.println("\n\n"
				+ "Notice that whenever an elimination strategy of order N affects a change \n"
				+ "in the puzzle, the solver sets the order back to 1. \n\n"
				+ "Not all puzzles can be solved with this basic logic. Here is an example of \n"
				+ "a puzzle (also found online) which will require more than OrderN logic \n"
				+ "to solve:");
		
		Puzzle p3=new Puzzle(TestData.egregiousPuzzles[0]);
		WorkPuzzle wp3=new WorkPuzzle(p3);
		wp3.printPuzzle();
		
		N=5;
		System.out.println("Solve puzzle with order N logic (from order 1 up to "+N+").");
		wp3.solveByOrderN(N);
		wp3.printPuzzle();
		
		MySystemReader MSR = new MySystemReader(true);
		String userSays="";
		String browser="";
		String filepath="";
		System.out.println("Would you like to launch a web browser and use this code?");
		userSays = MSR.getYesNo();
		if(userSays.equalsIgnoreCase("yes")) {
			
			System.out.println("Have you added the selenium standalone server to the referenced "
					+ "libraries for this project?");
			userSays = MSR.getYesNo();
			
			if(userSays.equalsIgnoreCase("yes")) {
				boolean again=false;
				do {
					System.out.println("Which browser would you like to launch? (Chrome, IE, Marionette)");
					browser=MSR.getString();
					System.out.println("What is the path to the driver executable file on the local machine?");
					filepath=MSR.getString();
					System.out.println("You chose "+browser+" for your browser and "+filepath+" for your path. Are these correct?");
					userSays = MSR.getYesNo();
					if(userSays.equalsIgnoreCase("no"))
						again=true;
				} while(again);
				/*
				// Feel free to hard-code your favorite browser and its corresponding filepath
				// to override the need to type in valid values
				browser="marionette";
				filepath="/Users/user/Desktop/Java/Selenium/geckodriver";
				*/
				if(userSays.equalsIgnoreCase("yes")){
					DriverMaker DM=new DriverMaker();
					WebDriver driver=DM.makeDriver(browser, filepath);
					WebSudokuDotCom autoPuzz=new WebSudokuDotCom(driver);
					do {
						autoPuzz.readPuzzle();
						Puzzle Pweb = new Puzzle(autoPuzz.getReadPuzzle());
						WorkPuzzle WPweb=new WorkPuzzle(Pweb);
						WPweb.solveByOrderN(4);
						WPweb.printPuzzle();
						if(Pweb.getSolvedQ()) {
							try{
								autoPuzz.writePuzzle(RCS.get2DPuzzle(Pweb.getPuzzle()));
							}
							catch(Exception e) {}
							autoPuzz.submitPuzzle();
							System.out.println("Congratulations, we solved the puzzle.");
						}
						else{
							System.out.println("Sorry, the program could not solve this puzzle");
						}
						System.out.println("Would you like to try again?");
						userSays = MSR.getYesNo();
						autoPuzz.getNewPuzzle();
						
						
					} while(userSays.equalsIgnoreCase("yes"));
					driver.quit();
					
				}
			}
		}
    }
}
